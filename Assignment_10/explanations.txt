1. Using Namespace std
Explanations:
Using cout, endl etc without specifying the namespace will cause an error, because these are defined in the std namespace in the iostream.h file.
Without the namespace, the compiler doesn't know in which namespace it is defined. 

Solution:
To solve this, just add std:: infront of each cout, string and endl.

2. Removing Critter prefix
 error: 'hunger' was not declared in this scope
Explanation: The compiler doesn't know that the 'hunger' used is from the Critter class

Solution (without adding Critter::) :
Change 'hunger' from private to public to be accessed outside the Critter class 
Add a new method in testcritter.cpp which is outside the Critter class in Critter.cpp
Create a new instance 'c' for hunger (passing as an argument) in the new method.
Add 'c.' prefix in front of int hunger since it is now an object of the instance Critter class c

/*
a) Comment out the using namespace std; and then take your time, read and 
interpret the error messages.

Explanation: The compiler produces a set of errors due to missing the namespace
before objects.
It outputs that "string", "cout" and "endl" weren't declared in the scope.
Objects "string", "cout" and "endl" declared inside a namespace block are placed
in a named scope that prevents them from being mistaken for identically-named 
symbols in other scopes. Therefore we can only use these objects, that are 
defined inside of the std namespace, we need to prepend "std::" to each 
"string", "cout" and "endl" found inside Critter.cpp

b) Also remove the Critter:: prefix in one of the methods in Critter.cpp, 
read and interpret the error message.

Removed Critter:: before setName method
Explanation: The compiler produces an error saying that "name" was not defined 
in the scope.
"name" is a private data member of the Critter class, defined in Critter.h
When implementing a method for a class it is not necessary to use the selection 
operator to call methods of the same class or to access data members.
In our case we haven't specified the class our method belongs to.
Therefore we can't access the class' other methods or data members.
We have to prepend "Critter::" to the method definition or write the 
method definition inside header file or make the data member public.
*/